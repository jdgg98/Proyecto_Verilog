$date
	Thu Feb 25 02:31:33 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module probador $end
$var wire 12 ! QR [11:0] $end
$var wire 12 " L [11:0] $end
$var wire 1 # EN $end
$var wire 1 $ CLR $end
$var wire 1 % CLK $end
$scope module registrofinal $end
$var wire 12 & QR [11:0] $end
$var wire 12 ' L [11:0] $end
$var wire 1 # EN $end
$var wire 1 $ CLR $end
$var wire 1 % CLK $end
$scope module bit0 $end
$var wire 1 ( D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 ) Q $end
$upscope $end
$scope module bit1 $end
$var wire 1 * D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 + Q $end
$upscope $end
$scope module bit10 $end
$var wire 1 , D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 - Q $end
$upscope $end
$scope module bit11 $end
$var wire 1 . D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 / Q $end
$upscope $end
$scope module bit2 $end
$var wire 1 0 D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 1 Q $end
$upscope $end
$scope module bit3 $end
$var wire 1 2 D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 3 Q $end
$upscope $end
$scope module bit4 $end
$var wire 1 4 D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 5 Q $end
$upscope $end
$scope module bit5 $end
$var wire 1 6 D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 7 Q $end
$upscope $end
$scope module bit6 $end
$var wire 1 8 D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 9 Q $end
$upscope $end
$scope module bit7 $end
$var wire 1 : D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 ; Q $end
$upscope $end
$scope module bit8 $end
$var wire 1 < D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 = Q $end
$upscope $end
$scope module bit9 $end
$var wire 1 > D $end
$var wire 1 # en $end
$var wire 1 $ clr $end
$var wire 1 % clk $end
$var reg 1 ? Q $end
$upscope $end
$upscope $end
$scope module signals_generator $end
$var wire 12 @ Q [11:0] $end
$var reg 12 A L [11:0] $end
$var reg 1 % clk $end
$var reg 1 $ clr $end
$var reg 1 # en $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx A
bx @
x?
x>
x=
x<
x;
x:
x9
x8
x7
x6
x5
x4
x3
x2
x1
x0
x/
x.
x-
x,
x+
x*
x)
x(
bx '
bx &
0%
1$
0#
bx "
bx !
$end
#1
0)
0+
01
03
05
07
09
0;
0=
0?
0-
b0 !
b0 &
b0 @
0/
0$
1%
#2
1#
0%
#3
0.
1,
1>
1<
0:
08
16
04
02
10
0*
0(
b11100100100 "
b11100100100 '
b11100100100 A
1%
#4
0#
1$
0%
#5
0$
1%
#6
0,
0>
0<
1:
06
12
00
1(
b10001001 "
b10001001 '
b10001001 A
0%
#7
1#
1%
#8
0#
1$
0%
#9
1)
13
b10001001 !
b10001001 &
b10001001 @
1;
1#
1%
#10
1.
1>
1<
0:
14
02
10
1*
b101100010111 "
b101100010111 '
b101100010111 A
0%
#11
0;
03
b0 !
b0 &
b0 @
0)
0$
1%
#12
0%
